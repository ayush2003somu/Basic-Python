```def Factorial(n: int):
    res=[None]*50000
    res_size=1
    res[0]=1
    for x in range(2,n+1):
        res_size=multiply(x,res,res_size)
        x=x+1
    
    print("Factorial is :")
    for i in range(res_size-1,-1,-1):
        print(res[i],end="")

def multiply(x:int ,res:list,res_size:int):
    carry=0
    for i in range(res_size):
        prod=res[i]*x +carry
        res[i]=prod%10
        carry=prod//10
    
    while(carry):
        res[res_size]=carry%10
        carry=carry//10
        res_size=res_size+1
    return res_size


Factorial(50)
```

#permutation
'''
elements = [1, 2, 3]


permutations = [[]]


for element in elements:
    new_permutations = []
    for permutation in permutations:
        for i in range(len(permutation) + 1):
            new_permutation = permutation[:i] + [element] + permutation[i:]
            new_permutations.append(new_permutation)
    permutations = new_permutations


for permutation in permutations:
    print(permutation)

'''

#divisor of two number
'''
num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))


while num2 != 0:
    temp = num2
    num2 = num1 % num2
    num1 = temp


print("The Greatest Common Divisor is:", num1)
'''

#occurence of numbers
'''
my_list = [1, 2, 3, 2, 1, 3, 4, 5, 4, 4]


occurrences = {}
for element in my_list:
    if element in occurrences:
        occurrences[element] += 1
    else:
        occurrences[element] = 1


for element, count in occurrences.items():
    print(element, ":", count)

'''
'''
#longest sequence 

nums = [100, 4, 200, 1, 2, 3, 5]


max_length = 0
current_length = 1


for i in range(1, len(nums)):
    if nums[i] == nums[i-1] + 1:
        current_length += 1
    else:
        max_length = max(max_length, current_length)
        current_length = 1


max_length = max(max_length, current_length)


print(max_length)
'''
'''
# pair make a target
nums = [2, 4, 6, 8, 10]
target = 12


pairs = []
seen = set()


for num in nums:
    complement = target - num
    if complement in seen:
        pairs.append((num, complement))
    seen.add(num)


print(pairs)
'''
'''
